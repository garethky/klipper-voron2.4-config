[gcode_macro _HOME_X]
gcode:
    # Always use consistent run_current on A/B steppers during sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 X
    # Move away
    G91
    G1 X-50 F12000
    
    # Wait just a second… (give StallGuard registers time to clear)
    G4 P500
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Y]
gcode:
    # Set current for sensorless homing
    {% set RUN_CURRENT_X = printer.configfile.settings['tmc2209 stepper_x'].run_current|float %}
    {% set RUN_CURRENT_Y = printer.configfile.settings['tmc2209 stepper_y'].run_current|float %}
    {% set HOME_CURRENT = 0.7 %}
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={HOME_CURRENT}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={HOME_CURRENT}

    # Home
    G28 Y
    # Move away
    G91
    G1 Y-50 F12000

    # Wait just a second… (give StallGuard registers time to clear)
    G4 P250
    # Set current during print
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT={RUN_CURRENT_X}
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT={RUN_CURRENT_Y}

[gcode_macro _HOME_Z]
gcode:
    SET_GCODE_OFFSET Z=0
    G90
    G1 Y150 X150 F12000
    G28 Z
    G91
    G1 Z1
    #PROBE
    #_SET_OFFSET_FROM_PROBE
    G91
    G1 Z10

[gcode_macro _SET_OFFSET_FROM_PROBE]
gcode:
    {% set z_offset = printer.probe.last_z_result | abs %}
    { action_respond_info('Probe Offset calibrated: %.5fmm' % (z_offset)) }
    SET_GCODE_OFFSET Z={z_offset}

[gcode_macro _SET_THERMAL_COMP]
gcode:
    #{% set expansion_coefficient = 0.00059 %} # measured empirically
    {% set expansion_coefficient = 0.00055 %} # measured empirically
    # pass in PRINT_TEMP= the final extruder temp before heating up
    {% set print_temp = params.PRINT_TEMP | float %}
    {% set temp_delta = print_temp - printer.extruder.target %}
    {% set thermal_comp_z = expansion_coefficient * temp_delta %}
    { action_respond_info('Extruder thermal compensation: %.5fmm for temperature
     change %.1fC' % (thermal_comp_z, temp_delta)) }
    SET_GCODE_OFFSET Z_ADJUST={thermal_comp_z} MOVE=1

[gcode_macro _HOMING_OVERRIDE]
gcode:
    # energize Z motors to prevent droop of quad gantry
    #SET_STEPPER_ENABLE STEPPER=stepper_z ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    #SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    # wait for stepper drivers
    #G4 P250
    #M117 "Z Steppers Enabled"
    
    # todo: safe lift Z
    SET_KINEMATIC_POSITION Z=0
    G91
    G1 Z5 F600
    G90
    
    {% set home_all = 'X' not in params and 'Y' not in params and 'Z' not in params %}
    {% if home_all or 'X' in params %}
        _HOME_X
    {% endif %}
    {% if home_all or 'Y' in params %}
        _HOME_Y
    {% endif %}
    {% if home_all or 'Z' in params %}
        _HOME_Z
    {% endif %}


[gcode_macro G32]
gcode:
    #STATUS_HOMING
    BED_MESH_CLEAR

    #now proceed to home as normal
    #STATUS_HOMING
    HOME_IF_NEEDED
    #STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    #STATUS_HOMING
    G28